/*
 * Copyright (c) 2023 Olivier Patry
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the Software
 * is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
 * OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

package net.opatry.nanoc.kt.dsl

import net.opatry.nanoc.kt.core.ContextProvider
import net.opatry.nanoc.kt.core.Item
import net.opatry.nanoc.kt.core.Repository
import java.io.File

class RouteRule(
    private val repository: Repository,
    val pattern: String,
    val run: RouteRule.(item: Item) -> String? = { it.identifier.toString() }
): Rule(), ContextProvider by repository, (Item) -> File? {

    override fun invoke(item: Item): File? {
        try {
            val outputPath = run(item) ?: return null
            val outputFile = File(repository.outputDir, outputPath.removePrefix("/"))
            outputFile.parentFile.mkdirs()
            if (item.isBinary) {
                // FIXME should we really consider "compiledContent" as a path to file?
                // FIXME how nanoc is dealing with .yaml associated to .jpeg?
                with(File(item.rawFileName)) {
                    if (exists()) {
                        copyTo(outputFile, overwrite = true)
                    } else {
                        // FIXME how can be possible otherwise? bug?
                        return null
                    }
                }
            } else {
                // TODO be smart if it's a route generated by a passthrough rule, copyTo is enough, no need to writeText nor deal with binary item
                outputFile.writeText(item.compiledContent)
            }
            return outputFile
        } finally {
            // FIXME routed state should be stored in item
            repository.routed(item)
        }
    }
}